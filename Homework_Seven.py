"""
–ó–∞–¥–∞–Ω–∏–µ 1 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤)
–ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º (–∞ —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º) –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
1) Person
(–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞:
1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π
(–æ–¥–Ω–æ –ø–æ–ª–µ, –º—ã –æ–∂–∏–¥–∞–µ–º - —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞ –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª), –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç—É,
2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
1.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
2.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
3.	–≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ/–µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
 (obj.age_in(year)); –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
** –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
** –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ 2019 (—Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞), –Ω–æ –±–æ–ª—å—à–µ 1900, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

"""
class Person:
    def __init__(self, full_name=" ", age_birth=None):
        self.full_name = full_name
        if not len(full_name.split(" ")) == 2:
            raise ValueError("Not name and surname")
        self.age_birth = age_birth
        if age_birth > 2019 or age_birth < 1900:
            raise ValueError("Incorrect year")

    def __str__(self):
        return f"{self.__class__} Object: full_name={self.full_name}"

    def only_name(self):
        l = (self.full_name).split()
        name = l[0]
        return name
    def only_surname(self):
        l = (self.full_name).split()
        surname = l[1]
        return surname
    def years(self, year=None):
        import datetime
        if year is None:
            year = datetime.date.today().year
        needed_age = year - self.age_birth
        return needed_age

p1 = Person(full_name="Bob Man", age_birth= 1987)
print(p1.full_name)
print(p1.only_name())
print(p1.only_surname())
print(p1.years())

"""
2) Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
** –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
1.	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç, Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç, Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç.
–¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>.
 –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä —É –≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äúprogrammer‚Äù —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
2.	–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.

"""
class Employee(Person):
    def __init__(self, full_name=" ", age_birth=None, salary=None, position=None, experience=None):
        Person.__init__(self, full_name, age_birth)
        # self.full_name = full_name
        # self.age_birth = age_birth
        self.salary = salary
        if salary < 0:
            raise ValueError("Salary can't be < 0")
        self.position = position
        self.experience = experience
        if experience < 0:
            raise ValueError("Experiense can't be < 0")

    def __str__(self):
        return f"{self.__class__} Object: full_name={self.full_name}"

    def mon_position(self):
        experience = self.experience
        if experience < 3:
            m_position = 'Junior'
        elif 3 > experience < 6:
            m_position = 'Middle'
        elif experience > 6:
            m_position = 'Senior'
        return f"{m_position} {self.position}"
    def mon_salary(self, money):
        if type(money) == str or type(money) == list or type(money) == dict:
            raise ValueError('Money must be int or float')
        return self.salary + money


e1 = Employee(full_name="Vasya Man", salary=100, age_birth=1987, experience=2, position='programmer')
print(e1.full_name)
print(e1.mon_position())
print(e1.mon_salary(35))

"""
3) ITEmployee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Employee)
1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skill (—Å–º. –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).
2. * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skills.
–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:
–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω –∏ –æ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞—Å—à–∏—Ä—è–µ—Ç–µ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill,
 –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏ –≤—Å–µ –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill
"""
class ITEmployee(Employee):
    def __init__(self, full_name=" ", age_birth=None, salary=None, position=None, experience=None, skills=[]):
        Employee.__init__(self, full_name, age_birth, salary, position, experience)
        self.skills = skills

    def __str__(self):
        return f"{self.__class__} Object: full_name={self.full_name}, skills={self.skills}"

    def add_skills(self, new_skill):
        try:
            self.skills.append(new_skill)
        except AttributeError: self.skills = [new_skill]
        return self.skills

    def all_skills(self, *args):
        for n in args:
            try:
                self.skills.extend(args)
            except AttributeError: self.skills = [*args]
            return self.skills



it1 = ITEmployee(full_name="Petya Man", salary=1000, age_birth=1985, experience=2, position='programmer', skills=[])
print(it1.full_name)
print(it1.add_skills('Java'))
print(it1.all_skills('More','OneMore'))
print(it1.skills)
print(it1.all_skills('Python','Ruby', 'ETC'))

"""
–ó–∞–¥–∞–Ω–∏–µ 2 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤)
–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å—ã
1) –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ (–ø—Ä–∏–º–µ—Ä: –∫–æ–º–Ω–∞—Ç–∞) (—Å–≤–æ–π—Å—Ç–≤–∞: –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã).
–ú–µ—Ç–æ–¥—ã:
1.	–≤—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å,
2.	–≤—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä.
3.	** —Å–¥–µ–ª–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–∏–≤–∞—Ç—å –¥–≤–µ ¬´–∫–æ–º–Ω–∞—Ç—ã¬ª –≤ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–µ–π +

"""
class Room:
    def __init__(self, one_side, second_side):
        self.one_side = one_side
        self.second_side = second_side

    def __add__(self, other):
        r = Room(self.one_side + other.one_side, self.second_side + other.second_side)
        return r
    def __str__(self):
        return f"Room {self.one_side}, {self.second_side}"

    def S_2(self):
        return self.one_side * self.second_side
    def P(self):
        return ((self.one_side + self.second_side) * 2)

first_room = Room(one_side=5, second_side= 10)

print(first_room.S_2())
print(first_room.P())
room_1 = Room(one_side=5, second_side=10)
room_2 = Room(one_side=8, second_side=9)

all = room_1 + room_2
print(all)

"""
2) –¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ (—Å–≤–æ–π—Å—Ç–≤–∞: X, Y). 
–ú–µ—Ç–æ–¥—ã:
1.	–ù—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, 
2.	* –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–æ–π –∏ –¥—Ä—É–≥–æ–π —Ç–æ—á–∫–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —ç—Ç–æ–≥–æ –∂–µ –∫–ª–∞—Å—Å–∞
3.	** –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        p = Point(self.x + other.x, self.y + other.y)
        return p

    def __str__(self):
        return f"Point {self.x}, {self.y}"

p0 = Point(x=0, y=0)
p1 = Point(x=2, y=3)
p2 = Point(x=4, y=6)

#1
rasstoyanie = p1 + p0
print(rasstoyanie)

#2
p_two = p1 + p2
print(p_two)